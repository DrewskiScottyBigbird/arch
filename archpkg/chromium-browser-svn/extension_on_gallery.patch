Index: src/chrome/common/extensions/url_pattern.cc
===================================================================
--- src/chrome/common/extensions/url_pattern.cc	(revision 49012)
+++ src/chrome/common/extensions/url_pattern.cc	(working copy)
@@ -82,6 +82,18 @@
 }
 
 bool URLPattern::MatchesUrl(const GURL &test) const {
+#if 0  
+  I wanted to make extensions run on *all* pages, but the change has negative effects that break many extensions.
+  // Disable extensions on extensions' pages and the Developer Tool
+  if (test.scheme() == "chrome-extension")
+    return false;
+  if (test.scheme() == "chrome" && test.host() == "devtools")
+    return false;
+  // Force extensions on all other non-standard pages (typically Chrome's internal pages)
+  if (!IsValidScheme(test.scheme()))
+    return true;
+#endif
+
   if (test.scheme() != scheme_)
     return false;
 
Index: src/chrome/renderer/user_script_slave.cc
===================================================================
--- src/chrome/renderer/user_script_slave.cc	(revision 49012)
+++ src/chrome/renderer/user_script_slave.cc	(working copy)
@@ -164,11 +164,6 @@
       return true;
   }
 
-  // Don't inject user scripts into the gallery itself.  This prevents
-  // a user script from removing the "report abuse" link, for example.
-  if (frame_url.host() == GURL(extension_urls::kGalleryBrowsePrefix).host())
-    return true;
-
   PerfTimer timer;
   int num_css = 0;
   int num_scripts = 0;
Index: src/chrome/renderer/render_view.cc
===================================================================
--- src/chrome/renderer/render_view.cc	(revision 49012)
+++ src/chrome/renderer/render_view.cc	(working copy)
@@ -4847,13 +4847,6 @@
 
 void RenderView::ExecuteCodeImpl(WebFrame* frame,
                                  const ViewMsg_ExecuteCode_Params& params) {
-  // Don't execute scripts in gallery pages.
-  GURL frame_url = GURL(frame->url());
-  if (frame_url.host() == GURL(extension_urls::kGalleryBrowsePrefix).host()) {
-    Send(new ViewMsg_ExecuteCodeFinished(routing_id_, params.request_id, true));
-    return;
-  }
-
   std::vector<WebFrame*> frame_vector;
   frame_vector.push_back(frame);
   if (params.all_frames)
