#!/bin/sh
ver=0.3.1
#
# Aurvote, a tool to vote for favorite packages on AUR for inclusion in [community]
# <wain@archlinux.fr>
#
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

TMPDIR="/tmp/aurvote-tmp-$(id -un)$$"
AUR_URL="http://aur.archlinux.org/packages.php"
AUR_URL2="http://aur.archlinux.org/packages.php?setlang=en&K="
AUR_URL3="http://aur.archlinux.org/packages.php?setlang=en&ID="


version() {
   echo "aurvote - version $ver"
   echo
   echo "        http://archlinux.fr/"
   exit 0
}
usage() {
   echo "aurvote - version $ver"
   echo
   echo "usage: aurvote <option> <pkgname1> <pkgname2> ..."
   echo
   echo "aurvote --version, -V       shows version"
   echo "aurvote --help,    -h       shows this help"
   echo "aurvote --vote,    -v       vote for packages"
   echo "aurvote --unvote,  -u       unvote packages"
   echo "aurvote --check,   -c       check for voted packages"
   echo "aurvote --flag,    -f       flag/unflag out-of-date"
   echo
   echo " example:  aurvote --vote yaourt shake bfilter"
   echo
   echo "written by <wain@archlinux.fr>"
   echo " homepage: http://archlinux.fr/"
}

### MAIN PROGRAM ###
ACTION="vote"
IDMODE=0
while [ "$#" -ne "0" ]; do
	case $1 in
		--help|-h)
			usage
			exit 0
			;;
		--version|-V) version;;
		--check|-c) ACTION="check";;
		--vote|-v) ACTION="vote";;
		--unvote|-u) ACTION="unvote";;
		--flag|-f) ACTION="flag";;
		# IDMODE is designed to be used with yaourt: aur -c --id packagename/aurid
		--id) IDMODE=1;; 
		--*|-*)
			usage
			exit 0
			;;
		*)
			pkgnames[${#pkgnames[@]}]=$1
			;;
	esac
	shift
done
		
if [ ${#pkgnames[@]} -eq 0 ]; then
	usage
	exit 0
fi

# Check config file
if [ ! -r ~/.aurvote ]; then
   echo "You have to create ~/.aurvote with inside:"
   echo "user=YOUR_AUR_USERNAME"
   echo "pass=YOUR_AUR_PASS"
   echo
   echo "To create a new account just go to:"
   echo "http://aur.archlinux.org/account.php"
   exit 1
else
   source ~/.aurvote
fi

# Log into AUR
mkdir -p $TMPDIR
wget --quiet --keep-session-cookie --save-cookies "$TMPDIR/.aurvote.cookies" \
--post-data="user=${user}&passwd=${pass}" http://aur.archlinux.org \
-O "$TMPDIR/aurvote.login" || exit 1
if grep --quiet "'error'>Bad username or password" "$TMPDIR/aurvote.login";then
	echo "incorrect password: check ~/.aurvote file"
	exit 1
fi

# vote/unvote/check for each package
for pkgname in ${pkgnames[@]}; do
	if [ $IDMODE -eq 1 ]; then
		aurid=${pkgname#*/}
		pkgname=${pkgname%/*}
	else
		aurid=$(wget --quiet "${AUR_URL2}${pkgname}" -O - | \
		grep -m 1 ">${pkgname}\ [0-9]" | sed -e "s/^.*packages.php?ID=//" -e "s/'.*//")
#                echo "Id is $aurid" # Demonstrates a bug in aurvote!!
                if [[ $aurid =~ "<span class=" ]]
                then
                    aurid=$(wget --quiet "${AUR_URL2}${pkgname}" -O - | \
                        grep -m 1 "<form method=\"post\"" | sed -e "s/^.*packages.php?ID=//" -e "s/\">//")
                fi
#                echo "Id is $aurid" # Demonstrates a bug in aurvote!!
		if [ -z "$aurid" ]; then
			echo "$pkgname was not found on AUR"
			continue
		fi
	fi
	if [ "$ACTION" = "check" ]; then
		[ $IDMODE -eq 0 ] && echo -n "$pkgname:  "
		wget --quiet --load-cookies="$TMPDIR/.aurvote.cookies" \
		"${AUR_URL3}${aurid}" -O "$TMPDIR/$pkgname" || echo "ERROR: Can't access $AUR_URL3"
		if grep -q "type='submit' class='button' name='do_UnVote'" $TMPDIR/$pkgname; then
			echo "already voted"
		elif grep -q "type='submit' class='button' name='do_Vote'" $TMPDIR/$pkgname; then
			echo "not voted"
		else
			echo "voted status not found"
		fi
	elif [ "$ACTION" = "vote" ]; then
		if wget --quiet --load-cookies="$TMPDIR/.aurvote.cookies" \
		--post-data="IDs[${aurid}]=1&ID=${aurid}&do_Vote=1" \
		$AUR_URL -O "$TMPDIR/$pkgname"; then
			echo "$pkgname now voted"
		else
			echo "ERROR: Can't access $AUR_URL"
		fi
	elif [ "$ACTION" = "unvote" ]; then
		if wget --quiet --load-cookies="$TMPDIR/.aurvote.cookies" \
		--post-data="IDs[${aurid}]=1&ID=${aurid}&do_UnVote=1" \
		$AUR_URL -O "$TMPDIR/$pkgname"; then
			echo "$pkgname now unvoted"
		else
			echo "ERROR: Can't access $AUR_URL"
		fi
	elif [ "$ACTION" = "flag" ]; then
		wget --quiet --load-cookies="$TMPDIR/.aurvote.cookies" \
		"${AUR_URL3}${aurid}" -O "$TMPDIR/$pkgname" || echo "ERROR: Can't access $AUR_URL3"
		if grep -q "type='submit' class='button' name='do_UnFlag'" $TMPDIR/$pkgname; then
		    if wget --quiet --load-cookies="$TMPDIR/.aurvote.cookies" \
		    --post-data="IDs[${aurid}]=1&ID=${aurid}&do_UnFlag=1" \
		    $AUR_URL -O "$TMPDIR/$pkgname"; then
			echo "$pkgname now unflagged"
                    fi
		elif grep -q "type='submit' class='button' name='do_Flag'" $TMPDIR/$pkgname; then
		    if wget --quiet --load-cookies="$TMPDIR/.aurvote.cookies" \
		    --post-data="IDs[${aurid}]=1&ID=${aurid}&do_Flag=1" \
		    $AUR_URL -O "$TMPDIR/$pkgname"; then
			echo "$pkgname now flagged"
                    fi
		else
			echo "flag status not found"
		fi
	fi
done

rm -r $TMPDIR/
exit 0
